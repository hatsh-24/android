using System;
using System.Collections.Generic;

// Define an interface for CRUD operations
public interface ICrudOperations<T>
{
    void Create(T item);
    void Read();
    void Update(int index, T newItem);
    void Delete(int index);
}

// Class to represent an entity (e.g., a person)
public class Person
{
    public string Name { get; set; }
    public int Age { get; set; }

    public override string ToString()
    {
        return $"Name: {Name}, Age: {Age}";
    }
}

// Class implementing CRUD operations for a list of persons
public class PersonManager : ICrudOperations<Person>
{
    private List<Person> persons = new List<Person>();

    public void Create(Person person)
    {
        persons.Add(person);
        Console.WriteLine("Person added successfully.");
    }

    public void Read()
    {
        Console.WriteLine("List of Persons:");
        foreach (var person in persons)
        {
            Console.WriteLine(person);
        }
    }

    public void Update(int index, Person newPerson)
    {
        if (index >= 0 && index < persons.Count)
        {
            persons[index] = newPerson;
            Console.WriteLine("Person updated successfully.");
        }
        else
        {
            Console.WriteLine("Invalid index. Unable to update.");
        }
    }

    public void Delete(int index)
    {
        if (index >= 0 && index < persons.Count)
        {
            persons.RemoveAt(index);
            Console.WriteLine("Person deleted successfully.");
        }
        else
        {
            Console.WriteLine("Invalid index. Unable to delete.");
        }
    }
}

class Program
{
    static void Main()
    {
        // Create an instance of PersonManager
        var personManager = new PersonManager();

        while (true)
        {
            // Display menu
            Console.WriteLine("\nMenu:");
            Console.WriteLine("1. Add Person");
            Console.WriteLine("2. View Persons");
            Console.WriteLine("3. Update Person");
            Console.WriteLine("4. Delete Person");
            Console.WriteLine("5. Exit");

            // Get user choice
            Console.Write("Enter your choice (1-5): ");
            int choice;
            if (int.TryParse(Console.ReadLine(), out choice))
            {
                switch (choice)
                {
                    case 1:
                        Console.Write("Enter Name: ");
                        string name = Console.ReadLine();
                        Console.Write("Enter Age: ");
                        int age;
                        if (int.TryParse(Console.ReadLine(), out age))
                        {
                            personManager.Create(new Person { Name = name, Age = age });
                        }
                        else
                        {
                            Console.WriteLine("Invalid age. Please enter a valid number.");
                        }
                        break;

                    case 2:
                        personManager.Read();
                        break;

                    case 3:
                        Console.Write("Enter index to update: ");
                        if (int.TryParse(Console.ReadLine(), out int updateIndex))
                        {
                            Console.Write("Enter new Name: ");
                            string newName = Console.ReadLine();
                            Console.Write("Enter new Age: ");
                            if (int.TryParse(Console.ReadLine(), out int newAge))
                            {
                                personManager.Update(updateIndex, new Person { Name = newName, Age = newAge });
                            }
                            else
                            {
                                Console.WriteLine("Invalid age. Please enter a valid number.");
                            }
                        }
                        else
                        {
                            Console.WriteLine("Invalid index. Please enter a valid number.");
                        }
                        break;

                    case 4:
                        Console.Write("Enter index to delete: ");
                        if (int.TryParse(Console.ReadLine(), out int deleteIndex))
                        {
                            personManager.Delete(deleteIndex);
                        }
                        else
                        {
                            Console.WriteLine("Invalid index. Please enter a valid number.");
                        }
                        break;

                    case 5:
                        Environment.Exit(0);
                        break;

                    default:
                        Console.WriteLine("Invalid choice. Please enter a number between 1 and 5.");
                        break;
                }
            }
            else
            {
                Console.WriteLine("Invalid input. Please enter a valid number.");
            }
        }
    }
}
