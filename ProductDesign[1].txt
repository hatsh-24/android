
package database

import android.content.ContentValues
import android.content.Context
import android.database.Cursor
import android.database.sqlite.SQLiteDatabase
import android.database.sqlite.SQLiteOpenHelper
import android.util.Log
import androidx.core.content.contentValuesOf

class Sqlitehelper(context: Context):SQLiteOpenHelper(context , dbname , null , dbversion) {
    companion object{
    private val dbname ="dbtest"
    private val dbversion= 1
    private val tblname="dbtest"
    private val Column1="id"
    private val Column2="name"
    private val Column3="pass"
    }

    override fun onCreate(db: SQLiteDatabase?) {
        var query=
            "CREATE TABLE $tblname ($Column1 INTEGER PRIMARY KEY , $Column2 TEXT,$Column3 TEXT)"
        db?.execSQL(query)
    }

    override fun onUpgrade(db: SQLiteDatabase?, oldVersion: Int, newVersion: Int) {
        var query=
            "DROP TABLE $tblname "
        db?.execSQL(query)
        onCreate(db)
    }

    fun adddata(userlist : user):Boolean
    {
        val database = this.writableDatabase
        val values = ContentValues()
        values.put(Column1,userlist.id)
        values.put(Column2,userlist.name)
        values.put(Column3,userlist.pass)
        var result = database.insert(tblname,null,values)
        if (result.toInt() == -1){
                return false
        }else{
                return true
        }
    }

    fun updatedata(user : user):Boolean
    {
        val database = this.writableDatabase
        val values = ContentValues()
        values.put(Column1,user.id)
        values.put(Column2,user.name)
        values.put(Column3,user.pass)
        var result = database.update(tblname,values,"id="+user.id,null)
        if (result.toInt() == -1){
                return false
        }else{
                return true
        }
    }

    fun deletedata(Id :Int):Boolean
    {
        val database = this.writableDatabase
        val WhereClause="$Column1=?"
        val WhereArgs= arrayOf(Id.toString())
        val result = database.delete(tblname , WhereClause , WhereArgs)
        database.close()
        return result >0
    }

    fun Display():ArrayList<user>{
        val data= ArrayList<user>()
        val database= this.writableDatabase
        val query="SELECT * FROM  $tblname"
        val cursor = database.rawQuery(query,null)
        cursor.use {
            while (cursor.moveToNext())
            {
                val idIndex=cursor.getColumnIndex(Column1)
                val nameIndex=cursor.getColumnIndex(Column2)
                val passIndex=cursor.getColumnIndex(Column3)
                if (idIndex!=-1 && nameIndex!=-1 && passIndex!=-1)
                {
                    val id = cursor.getInt(idIndex)
                    val name = cursor.getString(nameIndex)
                    val pass = cursor.getString(passIndex)
                    val student = user(id,name,pass)
                    data.add(student)
                }else{
                    Log.e("tblname","column $Column1 not found in cursor")
                }
            }
        }
        cursor.close()
        return data
    }

    fun checkuser(Name:String , Email:String):Boolean{
        val database= this.writableDatabase
        val query="SELECT * FROM  $tblname WHERE $Column2=? AND $Column3=?"
        val cursor : Cursor = database.rawQuery(query , arrayOf(Name , Email))
        return cursor.count>0
    }
}
------------------------------------------------
package com.example.crudlogin

import android.content.Intent
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.widget.ArrayAdapter
import android.widget.Button
import android.widget.EditText
import android.widget.ListView
import android.widget.Toast
import database.Sqlitehelper
import database.user

class Homepage : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_homepage)

        val sqlitehelper = Sqlitehelper(this)
        var id:EditText = findViewById(R.id.id)
        var name:EditText = findViewById(R.id.name)
        var pass:EditText = findViewById(R.id.pass)

        var insert:Button = findViewById(R.id.Insert)
        var update:Button = findViewById(R.id.update)
        var delete:Button = findViewById(R.id.delete)
        var display:Button = findViewById(R.id.display)
        var Login:Button = findViewById(R.id.Login)

        var listView:ListView = findViewById(R.id.listview)

        insert.setOnClickListener{
            val id= Integer.parseInt(id.text.toString())
            val name=name.text.toString()
            val pass=pass.text.toString()
            var result=sqlitehelper.adddata(user(id,name,pass))
            if (result == true){
                Toast.makeText(this,"Succefully inserted",Toast.LENGTH_SHORT).show()
            }else{
                Toast.makeText(this,"Failed",Toast.LENGTH_SHORT).show()
            }
        }

        update.setOnClickListener{
            val id= Integer.parseInt(id.text.toString())
            val name=name.text.toString()
            val pass=pass.text.toString()
            var result=sqlitehelper.updatedata(user(id,name,pass))
            if (result == true){
                Toast.makeText(this,"Succefully inserted",Toast.LENGTH_SHORT).show()
            }else{
                Toast.makeText(this,"Failed",Toast.LENGTH_SHORT).show()
            }
        }

        delete.setOnClickListener{
            val id = id.text.toString()
            if (id.isNotEmpty())
            {
                val id =id.toInt()
                val deleted = sqlitehelper.deletedata(id)
                if(deleted)
                {
                    Toast.makeText(this, "Row Deleted succefully", Toast.LENGTH_SHORT).show()
                }
                else
                {
                    Toast.makeText(this, "Fail to deleted Row", Toast.LENGTH_SHORT).show()
                }
            }
            else
            {
                Toast.makeText(this, "row is empty", Toast.LENGTH_SHORT).show()
            }
        }

        display.setOnClickListener{
            val data=sqlitehelper.Display()
            val adapter = ArrayAdapter(this,android.R.layout.simple_list_item_1,data)
            listView.adapter = adapter
        }


        Login.setOnClickListener{
            val name = name.text.toString()
            val pass = pass.text.toString()

            if (name.isNotEmpty() && pass.isNotEmpty())
            {
                if (sqlitehelper.checkuser(name ,pass))
                {
                    Toast.makeText(this,"Login SuccessFull",Toast.LENGTH_SHORT).show()
                    val intent= Intent(this,MainActivity::class.java)
                    startActivity(intent)
                    finish()
                }
                else
                {
                    Toast.makeText(this,"Login Fail",Toast.LENGTH_SHORT).show()
                }
            }
            else
            {
                Toast.makeText(this,"Please Enter a Value",Toast.LENGTH_SHORT).show()
            }

        }

        val logout:Button = findViewById(R.id.Logout)

        logout.setOnClickListener(View.OnClickListener {
            val intent = Intent(this,Login::class.java)
            startActivity(intent)
        })


    }


}
