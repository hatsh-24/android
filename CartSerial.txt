public async Task<ActionResult> Index()
 {
     var ResponseValue = await client.GetAsync(baseUrlTeacher);
     var response = await ResponseValue.Content.ReadAsStringAsync();
     var listTeachers = JsonConvert.DeserializeObject<List<Teacher>>(response);
     return View(listTeachers);
 }
----------------------------cre--------------
 public async Task<ActionResult> Create(Teacher teacher)
{
    try
    {
        var jsonData = JsonConvert.SerializeObject(teacher);
        var ResponseData = await client.PostAsync(baseUrlTeacher, new StringContent(jsonData, Encoding.UTF8, "application/json"));
        Console.WriteLine(ResponseData);
        return RedirectToAction(nameof(Index));
    }
    catch
    {
        return View();
    }
}
------------------------------edi------------
public async Task<ActionResult> Edit(int id, Teacher teacher)
{
    try
    {
        var jsonData = JsonConvert.SerializeObject(teacher);
        var ResponseData = await client.PutAsync(baseUrlTeacher + "/" + id.ToString(), new StringContent(jsonData, Encoding.UTF8, "application/json"));
        Console.WriteLine(ResponseData);
        return RedirectToAction(nameof(Index));
    }
    catch
    {
        return View();
    }
}
------------------------------del------------
public async Task<ActionResult> Delete(int id, Teacher teacher)
{
    try
    {
        var jsonData = JsonConvert.SerializeObject(teacher);
        var ResponseData = await client.DeleteAsync(baseUrlTeacher + "/" + id.ToString());
        Console.WriteLine(ResponseData);
        return RedirectToAction(nameof(Index));
    }
    catch
    {
        return View();
    }
}
------------------------log-------------------
public IActionResult Index()
{
    return View();
}

public IActionResult Login()
{
    if (HttpContext.Session.GetString("UserSession") != null)
    {
        return RedirectToAction("Dashboard");
    }
    return View();
}

[HttpPost]
public IActionResult Login(User user)
{
    var myuser = myDbContext.Users.Where(x=>x.Emailid == user.Emailid && x.Password == user.Password).FirstOrDefault();
    if (myuser != null) 
    {
        HttpContext.Session.SetString("UserSession",myuser.Emailid);
        return RedirectToAction("Dashboard");
    }
    else
    {
        ViewBag.Message = "Login Failed...";
    }
    return View();
}

public IActionResult Dashboard()
{
    if(HttpContext.Session.GetString("UserSession") !=null)
    {
        ViewBag.MySession = HttpContext.Session.GetString("UserSession").ToString();
    }
    else
    {
        return RedirectToAction("Login");
    }
    return View();
}

public IActionResult Logout()
{
    if (HttpContext.Session.GetString("UserSession") != null)
    {
        HttpContext.Session.Remove("UserSession");
        return RedirectToAction("Login");
    }
    return View();
}





--------
public async Task<Teacher> GetTeacherById(int id)
 {
     var ResponseValue = await client.GetAsync(baseUrlTeacher + "/" + id.ToString());
     var response = await ResponseValue.Content.ReadAsStringAsync();
     var teacher = JsonConvert.DeserializeObject<Teacher>(response);
     return teacher;
 }

 public async Task<IEnumerable<Teacher>> GetTeacherByName(string tname)
 {
     var ResponseValue = await client.GetAsync(baseUrlTeacher + "/designation/" + tname.ToString());
     var response = await ResponseValue.Content.ReadAsStringAsync();
     var teacher = JsonConvert.DeserializeObject<List<Teacher>>(response);
     return teacher;
 }
